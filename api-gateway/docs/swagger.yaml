basePath: /
definitions:
  auth.ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      token:
        type: string
    type: object
  auth.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  auth.RegisterUserRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
    type: object
  auth.ValidateTokenRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  organization.CreateDepartmentRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  organization.CreateOrganizationRequest:
    properties:
      description:
        type: string
      name:
        type: string
      parent_organization_id:
        type: string
      type:
        type: string
    required:
    - description
    - name
    - type
    type: object
  utils.ErrorResponse:
    properties:
      code:
        description: Kode error spesifik (e.g., "AUTH_401")
        type: string
      details: {}
      error:
        type: string
      success:
        type: boolean
    type: object
  utils.SuccessResponse:
    properties:
      data: {}
      meta:
        description: Untuk pagination/dll
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: sarikhin@yahoo.co.id
    name: API Support
    url: http://www.swagger.io/support
  description: This is a API documentation for ERP microservice.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API Gateway Documentation
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email/password
      parameters:
      - description: Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: User Login
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get new access token using refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.RefreshTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Refresh Token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register User
      parameters:
      - description: User Registration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Register User
      tags:
      - Auth
  /auth/validate:
    post:
      consumes:
      - application/json
      description: Validate token
      parameters:
      - description: Token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ValidateTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Validate token
      tags:
      - Auth
  /org/department:
    get:
      consumes:
      - application/json
      description: List Departments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: List Departments
      tags:
      - Organization
    post:
      consumes:
      - application/json
      description: Create Department
      parameters:
      - description: Department
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/organization.CreateDepartmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Create Departments
      tags:
      - Organization
  /org/organization:
    get:
      consumes:
      - application/json
      description: List Organization
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: List Organization
      tags:
      - Organization
    post:
      consumes:
      - application/json
      description: Create Organization
      parameters:
      - description: Organization
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/organization.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Create Organization
      tags:
      - Organization
  /org/organization/{id}:
    get:
      consumes:
      - application/json
      description: Get Organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Bearer: []
      summary: Get Organization
      tags:
      - Organization
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

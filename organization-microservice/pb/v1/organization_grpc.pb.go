// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: organization-microservice/pb/v1/organization.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrganizationService_CreateOrganization_FullMethodName                 = "/organization.v1.OrganizationService/CreateOrganization"
	OrganizationService_GetOrganization_FullMethodName                    = "/organization.v1.OrganizationService/GetOrganization"
	OrganizationService_ListOrganization_FullMethodName                   = "/organization.v1.OrganizationService/ListOrganization"
	OrganizationService_UpdateOrganization_FullMethodName                 = "/organization.v1.OrganizationService/UpdateOrganization"
	OrganizationService_DeleteOrganization_FullMethodName                 = "/organization.v1.OrganizationService/DeleteOrganization"
	OrganizationService_CreateDepartment_FullMethodName                   = "/organization.v1.OrganizationService/CreateDepartment"
	OrganizationService_GetDepartment_FullMethodName                      = "/organization.v1.OrganizationService/GetDepartment"
	OrganizationService_ListDepartment_FullMethodName                     = "/organization.v1.OrganizationService/ListDepartment"
	OrganizationService_UpdateDepartment_FullMethodName                   = "/organization.v1.OrganizationService/UpdateDepartment"
	OrganizationService_DeleteDepartment_FullMethodName                   = "/organization.v1.OrganizationService/DeleteDepartment"
	OrganizationService_CreateWorkUnit_FullMethodName                     = "/organization.v1.OrganizationService/CreateWorkUnit"
	OrganizationService_GetWorkUnit_FullMethodName                        = "/organization.v1.OrganizationService/GetWorkUnit"
	OrganizationService_ListWorkUnit_FullMethodName                       = "/organization.v1.OrganizationService/ListWorkUnit"
	OrganizationService_DeleteWorkUnit_FullMethodName                     = "/organization.v1.OrganizationService/DeleteWorkUnit"
	OrganizationService_CreatePosition_FullMethodName                     = "/organization.v1.OrganizationService/CreatePosition"
	OrganizationService_GetPosition_FullMethodName                        = "/organization.v1.OrganizationService/GetPosition"
	OrganizationService_ListPosition_FullMethodName                       = "/organization.v1.OrganizationService/ListPosition"
	OrganizationService_UpdatePosition_FullMethodName                     = "/organization.v1.OrganizationService/UpdatePosition"
	OrganizationService_DeletePosition_FullMethodName                     = "/organization.v1.OrganizationService/DeletePosition"
	OrganizationService_CreatePositionHierarchy_FullMethodName            = "/organization.v1.OrganizationService/CreatePositionHierarchy"
	OrganizationService_GetPositionHierarchyBySuperior_FullMethodName     = "/organization.v1.OrganizationService/GetPositionHierarchyBySuperior"
	OrganizationService_GetPositionHierarchyBySubordinated_FullMethodName = "/organization.v1.OrganizationService/GetPositionHierarchyBySubordinated"
	OrganizationService_DeletePositionHierarchy_FullMethodName            = "/organization.v1.OrganizationService/DeletePositionHierarchy"
)

// OrganizationServiceClient is the client API for OrganizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationServiceClient interface {
	// Oraganization Endpoint
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	ListOrganization(ctx context.Context, in *ListOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationResponse, error)
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// Department Endpoint
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentResponse, error)
	ListDepartment(ctx context.Context, in *ListDepartmentRequest, opts ...grpc.CallOption) (*ListDepartmentResponse, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	// WorkUnit Endpoint
	CreateWorkUnit(ctx context.Context, in *CreateWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error)
	GetWorkUnit(ctx context.Context, in *GetWorkUnitRequest, opts ...grpc.CallOption) (*GetWorkUnitResponse, error)
	ListWorkUnit(ctx context.Context, in *ListWorkUnitRequest, opts ...grpc.CallOption) (*ListWorkUnitResponse, error)
	DeleteWorkUnit(ctx context.Context, in *DeleteWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error)
	// Position Endpoint
	CreatePosition(ctx context.Context, in *CreatePositionRequest, opts ...grpc.CallOption) (*Position, error)
	GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error)
	ListPosition(ctx context.Context, in *ListPositionRequest, opts ...grpc.CallOption) (*ListPositionResponse, error)
	UpdatePosition(ctx context.Context, in *UpdatePositionRequest, opts ...grpc.CallOption) (*Position, error)
	DeletePosition(ctx context.Context, in *DeletePositionRequest, opts ...grpc.CallOption) (*Position, error)
	// Work Hierarchy Endpoint
	CreatePositionHierarchy(ctx context.Context, in *CreatePositionHierarchyRequest, opts ...grpc.CallOption) (*PositionHierarchy, error)
	GetPositionHierarchyBySuperior(ctx context.Context, in *GetPositionHierarchyBySuperiorRequest, opts ...grpc.CallOption) (*ListPositionHierarchyResponse, error)
	GetPositionHierarchyBySubordinated(ctx context.Context, in *GetPositionHierarchyBySubordinatedRequest, opts ...grpc.CallOption) (*ListPositionHierarchyResponse, error)
	DeletePositionHierarchy(ctx context.Context, in *DeletePositionHierarchyRequest, opts ...grpc.CallOption) (*PositionHierarchy, error)
}

type organizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationServiceClient(cc grpc.ClientConnInterface) OrganizationServiceClient {
	return &organizationServiceClient{cc}
}

func (c *organizationServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, OrganizationService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListOrganization(ctx context.Context, in *ListOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organization)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Department)
	err := c.cc.Invoke(ctx, OrganizationService_CreateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDepartmentResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListDepartment(ctx context.Context, in *ListDepartmentRequest, opts ...grpc.CallOption) (*ListDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepartmentResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Department)
	err := c.cc.Invoke(ctx, OrganizationService_UpdateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Department)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreateWorkUnit(ctx context.Context, in *CreateWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkUnit)
	err := c.cc.Invoke(ctx, OrganizationService_CreateWorkUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetWorkUnit(ctx context.Context, in *GetWorkUnitRequest, opts ...grpc.CallOption) (*GetWorkUnitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkUnitResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetWorkUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListWorkUnit(ctx context.Context, in *ListWorkUnitRequest, opts ...grpc.CallOption) (*ListWorkUnitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkUnitResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListWorkUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeleteWorkUnit(ctx context.Context, in *DeleteWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkUnit)
	err := c.cc.Invoke(ctx, OrganizationService_DeleteWorkUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreatePosition(ctx context.Context, in *CreatePositionRequest, opts ...grpc.CallOption) (*Position, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Position)
	err := c.cc.Invoke(ctx, OrganizationService_CreatePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPositionResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) ListPosition(ctx context.Context, in *ListPositionRequest, opts ...grpc.CallOption) (*ListPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPositionResponse)
	err := c.cc.Invoke(ctx, OrganizationService_ListPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) UpdatePosition(ctx context.Context, in *UpdatePositionRequest, opts ...grpc.CallOption) (*Position, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Position)
	err := c.cc.Invoke(ctx, OrganizationService_UpdatePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeletePosition(ctx context.Context, in *DeletePositionRequest, opts ...grpc.CallOption) (*Position, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Position)
	err := c.cc.Invoke(ctx, OrganizationService_DeletePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) CreatePositionHierarchy(ctx context.Context, in *CreatePositionHierarchyRequest, opts ...grpc.CallOption) (*PositionHierarchy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionHierarchy)
	err := c.cc.Invoke(ctx, OrganizationService_CreatePositionHierarchy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetPositionHierarchyBySuperior(ctx context.Context, in *GetPositionHierarchyBySuperiorRequest, opts ...grpc.CallOption) (*ListPositionHierarchyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPositionHierarchyResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetPositionHierarchyBySuperior_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) GetPositionHierarchyBySubordinated(ctx context.Context, in *GetPositionHierarchyBySubordinatedRequest, opts ...grpc.CallOption) (*ListPositionHierarchyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPositionHierarchyResponse)
	err := c.cc.Invoke(ctx, OrganizationService_GetPositionHierarchyBySubordinated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationServiceClient) DeletePositionHierarchy(ctx context.Context, in *DeletePositionHierarchyRequest, opts ...grpc.CallOption) (*PositionHierarchy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionHierarchy)
	err := c.cc.Invoke(ctx, OrganizationService_DeletePositionHierarchy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServiceServer is the server API for OrganizationService service.
// All implementations must embed UnimplementedOrganizationServiceServer
// for forward compatibility.
type OrganizationServiceServer interface {
	// Oraganization Endpoint
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*Organization, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	ListOrganization(context.Context, *ListOrganizationRequest) (*ListOrganizationResponse, error)
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*Organization, error)
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*Organization, error)
	// Department Endpoint
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*Department, error)
	GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error)
	ListDepartment(context.Context, *ListDepartmentRequest) (*ListDepartmentResponse, error)
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*Department, error)
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*Department, error)
	// WorkUnit Endpoint
	CreateWorkUnit(context.Context, *CreateWorkUnitRequest) (*WorkUnit, error)
	GetWorkUnit(context.Context, *GetWorkUnitRequest) (*GetWorkUnitResponse, error)
	ListWorkUnit(context.Context, *ListWorkUnitRequest) (*ListWorkUnitResponse, error)
	DeleteWorkUnit(context.Context, *DeleteWorkUnitRequest) (*WorkUnit, error)
	// Position Endpoint
	CreatePosition(context.Context, *CreatePositionRequest) (*Position, error)
	GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error)
	ListPosition(context.Context, *ListPositionRequest) (*ListPositionResponse, error)
	UpdatePosition(context.Context, *UpdatePositionRequest) (*Position, error)
	DeletePosition(context.Context, *DeletePositionRequest) (*Position, error)
	// Work Hierarchy Endpoint
	CreatePositionHierarchy(context.Context, *CreatePositionHierarchyRequest) (*PositionHierarchy, error)
	GetPositionHierarchyBySuperior(context.Context, *GetPositionHierarchyBySuperiorRequest) (*ListPositionHierarchyResponse, error)
	GetPositionHierarchyBySubordinated(context.Context, *GetPositionHierarchyBySubordinatedRequest) (*ListPositionHierarchyResponse, error)
	DeletePositionHierarchy(context.Context, *DeletePositionHierarchyRequest) (*PositionHierarchy, error)
	mustEmbedUnimplementedOrganizationServiceServer()
}

// UnimplementedOrganizationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrganizationServiceServer struct{}

func (UnimplementedOrganizationServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) ListOrganization(context.Context, *ListOrganizationRequest) (*ListOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedOrganizationServiceServer) GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedOrganizationServiceServer) ListDepartment(context.Context, *ListDepartmentRequest) (*ListDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartment not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedOrganizationServiceServer) CreateWorkUnit(context.Context, *CreateWorkUnitRequest) (*WorkUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkUnit not implemented")
}
func (UnimplementedOrganizationServiceServer) GetWorkUnit(context.Context, *GetWorkUnitRequest) (*GetWorkUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkUnit not implemented")
}
func (UnimplementedOrganizationServiceServer) ListWorkUnit(context.Context, *ListWorkUnitRequest) (*ListWorkUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkUnit not implemented")
}
func (UnimplementedOrganizationServiceServer) DeleteWorkUnit(context.Context, *DeleteWorkUnitRequest) (*WorkUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkUnit not implemented")
}
func (UnimplementedOrganizationServiceServer) CreatePosition(context.Context, *CreatePositionRequest) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosition not implemented")
}
func (UnimplementedOrganizationServiceServer) GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (UnimplementedOrganizationServiceServer) ListPosition(context.Context, *ListPositionRequest) (*ListPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPosition not implemented")
}
func (UnimplementedOrganizationServiceServer) UpdatePosition(context.Context, *UpdatePositionRequest) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePosition not implemented")
}
func (UnimplementedOrganizationServiceServer) DeletePosition(context.Context, *DeletePositionRequest) (*Position, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePosition not implemented")
}
func (UnimplementedOrganizationServiceServer) CreatePositionHierarchy(context.Context, *CreatePositionHierarchyRequest) (*PositionHierarchy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePositionHierarchy not implemented")
}
func (UnimplementedOrganizationServiceServer) GetPositionHierarchyBySuperior(context.Context, *GetPositionHierarchyBySuperiorRequest) (*ListPositionHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionHierarchyBySuperior not implemented")
}
func (UnimplementedOrganizationServiceServer) GetPositionHierarchyBySubordinated(context.Context, *GetPositionHierarchyBySubordinatedRequest) (*ListPositionHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionHierarchyBySubordinated not implemented")
}
func (UnimplementedOrganizationServiceServer) DeletePositionHierarchy(context.Context, *DeletePositionHierarchyRequest) (*PositionHierarchy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePositionHierarchy not implemented")
}
func (UnimplementedOrganizationServiceServer) mustEmbedUnimplementedOrganizationServiceServer() {}
func (UnimplementedOrganizationServiceServer) testEmbeddedByValue()                             {}

// UnsafeOrganizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServiceServer will
// result in compilation errors.
type UnsafeOrganizationServiceServer interface {
	mustEmbedUnimplementedOrganizationServiceServer()
}

func RegisterOrganizationServiceServer(s grpc.ServiceRegistrar, srv OrganizationServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrganizationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrganizationService_ServiceDesc, srv)
}

func _OrganizationService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListOrganization(ctx, req.(*ListOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetDepartment(ctx, req.(*GetDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListDepartment(ctx, req.(*ListDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreateWorkUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreateWorkUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreateWorkUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreateWorkUnit(ctx, req.(*CreateWorkUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetWorkUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetWorkUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetWorkUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetWorkUnit(ctx, req.(*GetWorkUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListWorkUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListWorkUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListWorkUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListWorkUnit(ctx, req.(*ListWorkUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeleteWorkUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeleteWorkUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeleteWorkUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeleteWorkUnit(ctx, req.(*DeleteWorkUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreatePosition(ctx, req.(*CreatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetPosition(ctx, req.(*GetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_ListPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).ListPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_ListPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).ListPosition(ctx, req.(*ListPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_UpdatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).UpdatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_UpdatePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).UpdatePosition(ctx, req.(*UpdatePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeletePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeletePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeletePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeletePosition(ctx, req.(*DeletePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_CreatePositionHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePositionHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).CreatePositionHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_CreatePositionHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).CreatePositionHierarchy(ctx, req.(*CreatePositionHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetPositionHierarchyBySuperior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionHierarchyBySuperiorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetPositionHierarchyBySuperior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetPositionHierarchyBySuperior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetPositionHierarchyBySuperior(ctx, req.(*GetPositionHierarchyBySuperiorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_GetPositionHierarchyBySubordinated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionHierarchyBySubordinatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).GetPositionHierarchyBySubordinated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_GetPositionHierarchyBySubordinated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).GetPositionHierarchyBySubordinated(ctx, req.(*GetPositionHierarchyBySubordinatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationService_DeletePositionHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePositionHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServiceServer).DeletePositionHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationService_DeletePositionHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServiceServer).DeletePositionHierarchy(ctx, req.(*DeletePositionHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationService_ServiceDesc is the grpc.ServiceDesc for OrganizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organization.v1.OrganizationService",
	HandlerType: (*OrganizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganization",
			Handler:    _OrganizationService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _OrganizationService_GetOrganization_Handler,
		},
		{
			MethodName: "ListOrganization",
			Handler:    _OrganizationService_ListOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _OrganizationService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _OrganizationService_DeleteOrganization_Handler,
		},
		{
			MethodName: "CreateDepartment",
			Handler:    _OrganizationService_CreateDepartment_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _OrganizationService_GetDepartment_Handler,
		},
		{
			MethodName: "ListDepartment",
			Handler:    _OrganizationService_ListDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _OrganizationService_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _OrganizationService_DeleteDepartment_Handler,
		},
		{
			MethodName: "CreateWorkUnit",
			Handler:    _OrganizationService_CreateWorkUnit_Handler,
		},
		{
			MethodName: "GetWorkUnit",
			Handler:    _OrganizationService_GetWorkUnit_Handler,
		},
		{
			MethodName: "ListWorkUnit",
			Handler:    _OrganizationService_ListWorkUnit_Handler,
		},
		{
			MethodName: "DeleteWorkUnit",
			Handler:    _OrganizationService_DeleteWorkUnit_Handler,
		},
		{
			MethodName: "CreatePosition",
			Handler:    _OrganizationService_CreatePosition_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _OrganizationService_GetPosition_Handler,
		},
		{
			MethodName: "ListPosition",
			Handler:    _OrganizationService_ListPosition_Handler,
		},
		{
			MethodName: "UpdatePosition",
			Handler:    _OrganizationService_UpdatePosition_Handler,
		},
		{
			MethodName: "DeletePosition",
			Handler:    _OrganizationService_DeletePosition_Handler,
		},
		{
			MethodName: "CreatePositionHierarchy",
			Handler:    _OrganizationService_CreatePositionHierarchy_Handler,
		},
		{
			MethodName: "GetPositionHierarchyBySuperior",
			Handler:    _OrganizationService_GetPositionHierarchyBySuperior_Handler,
		},
		{
			MethodName: "GetPositionHierarchyBySubordinated",
			Handler:    _OrganizationService_GetPositionHierarchyBySubordinated_Handler,
		},
		{
			MethodName: "DeletePositionHierarchy",
			Handler:    _OrganizationService_DeletePositionHierarchy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization-microservice/pb/v1/organization.proto",
}
